generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  subscriptionTier SubscriptionTier @default(FREE)
  latitude      Float?
  longitude     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  communities        CommunityMember[]
  posts              Post[]
  comments           Comment[]
  messages           Message[]
  businesses         Business[]
  notifications      Notification[]
  sentNotifications  Notification[] @relation("NotificationFromUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  latitude    Float
  longitude   Float
  radius      Float    @default(5.0) // km
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members       CommunityMember[]
  posts         Post[]
  messages      Message[]
  businesses    BusinessCommunity[]
  notifications Notification[]
}

model CommunityMember {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  type        PostType @default(GENERAL)
  userId      String
  communityId String
  aiTags      String?  @db.Text // JSON array of AI-generated tags
  priority    Priority @default(NORMAL)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community     Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  comments      Comment[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  userId      String
  communityId String
  aiProcessed Boolean  @default(false)
  aiTags      String?  @db.Text // JSON array of AI-generated tags
  aiSummary   String?  @db.Text // AI-generated summary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([communityId, createdAt])
  @@index([userId])
}

model Business {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  website     String?
  phone       String?
  email       String?
  ownerId     String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  communities BusinessCommunity[]
}

model BusinessCommunity {
  id          String   @id @default(cuid())
  businessId  String
  communityId String
  createdAt   DateTime @default(now())

  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([businessId, communityId])
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionTier {
  FREE
  PERSONAL
  BUSINESS
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum PostType {
  GENERAL
  QUESTION
  ALERT
  ROADBLOCK
  PROTEST
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Notification {
  id          String   @id @default(cuid())
  type        NotificationType
  title       String
  message     String   @db.Text
  read        Boolean  @default(false)
  priority    Priority @default(NORMAL)
  userId      String
  fromUserId  String?
  communityId String?
  postId      String?
  metadata    String?  @db.Text // JSON for additional data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromUser    User?     @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)
  post        Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)

  @@index([userId, read])
  @@index([createdAt])
}

enum NotificationType {
  MENTION
  REPLY
  COMMUNITY_JOIN
  POST_LIKE
  ALERT
  SYSTEM
  SUBSCRIPTION
  WELCOME
}